# dsa/random/for_mom.py

import matplotlib.pyplot as plt
import numpy as np
import os


# birthday: 10/13/1963

'''
Script containing the code for my christmas present to mom.
Want this to produce a panel plot (2x2) of different random data visualizations

'''


class panelPlotter:

    def __init__(self, array_size, cmap='Set1', axes_lines:bool=False):
        '''
        Class to create a 4-panel plot
        
        The 4 panels should contain
        '''
        self.array_size = array_size
        self.axes_lines = axes_lines
        self.cmap = cmap
        
    def get_scatter_data(self):
        '''
        Generates random data for a colored scatter plot
        '''
#        Generating x, y, size & color arrays
        x = np.random.random(self.array_size)
        y = np.random.random(self.array_size)
        s = np.random.randint(0,50, self.array_size)
        c = np.random.random(self.array_size)
        
        return x, y, s, c
        
    def get_gauss_data(self):
        '''Generates random sigma and mu values for gaussian overlay plot'''
        mu = np.random.randint(0,1000, self.array_size)
        sigma = np.random.randint(0,1000, self.array_size)
        x = np.linspace(0,1000)
        
        return x, mu, sigma
        
    def gauss(self, x, mu, sig):
        '''
        Returns Gaussian for an input array
        
        parameters:
            x : array-like; input points to calculate gaussian dist for
            mu : int or float; mean of distribution
            sig : int or float; std dev of distribution
        '''
        return np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.)))

    def make_gauss_waves(self, x, mu, sigma, savefig=True):
        '''
        Creates overlaid Gaussian wave-packet plots
        
        parameters:
            x : array-like; input array to create Gaussian dist
            mu : int or float; mean of dist (randomly-generated)
            sigma : int or float; std dev of gaussian dist
            savefig : boolean, default True; if True, saves figure created as PDF
        '''
        
        f,ax = plt.subplots()
        
        for m, s in zip(mu, sigma):
            r = np.random.random()
            g = np.random.random()
            b = np.random.random()
            ax.plot(x, np.random.random() * self.gauss(x, m, s), color=(r,g,b))
            ax.plot(x, np.random.random() * -self.gauss(x, m, s), color=(r,g,b))
        
        ax.set_xticks([])
        ax.set_yticks([])
        title = uuid.uuid4().hex
        ax.set_title(title)
        
        if self.axes_lines:
            ax.axis('off')
        
        if savefig:
            plot_path = os.path.join('.', 'plots', 'waves', f'waves_gauus_{title}.pdf')
            f.savefig(plot_path)
        self.f_gauss = f
        self.ax_gauss = ax
        
    def hist_data(self):
        '''
        Creates 2D histogram data arrays
        '''
        x = np.arange(0, self.array_size, 1)
        y = np.random.random(x.size)

        return x, y
        
    def contour_data(self):
        '''
        Randomly generates data arrays for contour plot (X, Y, Z)
        '''
        x = np.linspace(-10,10, self.array_size)
        y = np.linspace(-10,10, self.array_size)
        
#        Generating random coeffs
        a = np.random.random()
        b = np.random.random()
        
        X, Y = np.meshgrid(x, y)
        Z = np.sin((a*X)) + np.cos((b*Y))
        
        return X, Y, Z
        
        
    
    def panel_plot(self):
        '''
        Creates 2x2 panel plot from the "data" generated by the above methods
        '''
        f, axs = plt.subplots(2,2)
        
#        Creating 2-d histogram
        x, y = self.hist_data()
        axs[1,1].hist2d(x, y, cmap=self.cmap, bins=[25,25])


#        Creating scatter plot -- upper left
        x, y, s, c = self.get_scatter_data()
        axs[0,0].scatter(x,y,s, c=c, cmap=self.cmap)
        
#        Creating Gaussian Waves
        x, mu, sigma = self.get_gauss_data()
        for m, s in zip(mu,sigma):
            axs[0,1].plot(x, self.gauss(x, m, s))
            
#        Creating contour plot -- lower right
        X, Y, Z = self.contour_data()
        axs[1,0].contourf(X,Y, Z, levels=6, cmap=self.cmap+"_r")
        
#        Getting rid of axes ticks
        for axis in axs:
            for a in axis:
                a.set_xticks([])
                a.set_yticks([])
                a.axis('off')

        self.f_panel = f
        self.ax_panel = ax
                
        
        
if __name__=="__main__":
#    generating random array
    birthday = 10131963
    np.random.seed(birthday)
    r = np.random.random(size=10000)
    
    pp = panelPlotter(10000, axes_lines=True).panel_plot()

    plt.show()
    
